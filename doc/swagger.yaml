openapi: 3.0.3
info:
  version: '1.7.0'
  title: Fate Flow

paths:
  '/v1/info/fateboard':
    post:
      summary: get fateboard host and port
      tags:
        - information
      responses:
        '200':
          description: return fateboard host and port
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 0
                  retmsg:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      host:
                        type: string
                        example: 127.0.0.1
                      port:
                        type: integer
                        example: 8080
        '404':
          description: fateboard is not configured
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 404
                  retmsg:
                    type: string
                    example: fateboard is not configured

  '/v1/model/deploy':
    post:
      summary: deploy a model for predict
      tags:
        - model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - model_id
                - model_version
              properties:
                model_id:
                  type: string
                  example: 'arbiter-10000#guest-9999#host-10000#model'
                model_version:
                  type: string
                  example: '202111032155391167400'
                components_checkpoint:
                  type: object
                  additionalProperties:
                    type: object
                    description: use step_index or step_name to specity a checkpoint
                    properties:
                      step_index:
                        type: integer
                        example: 5
                      step_name:
                        type: string
                        example: round_5
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 0
                  retmsg:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      model_id:
                        type: string
                        example: 'arbiter-9999#guest-10000#host-9999#model'
                      model_version:
                        type: string
                        example: '202111032227378766180'
                      arbiter:
                        type: object
                        properties:
                          party_id:
                            type: integer
                            example: 9999
                      guest:
                        type: object
                        properties:
                          party_id:
                            type: integer
                            example: 10000
                      host:
                        type: object
                        properties:
                          party_id:
                            type: integer
                            example: 9999
                      detail:
                        type: object
                        properties:
                          arbiter:
                            type: object
                            properties:
                              party_id:
                                type: object
                                properties:
                                  retcode:
                                    type: integer
                                    example: 0
                                  retmsg:
                                    type: string
                                    example: deploy model of role arbiter 9999 success
                          guest:
                            type: object
                            properties:
                              party_id:
                                type: object
                                properties:
                                  retcode:
                                    type: integer
                                    example: 0
                                  retmsg:
                                    type: string
                                    example: deploy model of role guest 10000 success
                          host:
                            type: object
                            properties:
                              party_id:
                                type: object
                                properties:
                                  retcode:
                                    type: integer
                                    example: 0
                                  retmsg:
                                    type: string
                                    example: deploy model of role host 9999 success

  '/v1/model/transfer/{model_id}/{model_version}':
    post:
      summary: download a model by model_id and model_version (parameters in path)
      tags:
        - model
      parameters:
        - name: model_id
          in: path
          required: true
          description: 'model id (replace # with ~)'
          schema:
            type : string
            example: 'host~10000~arbiter-10000~guest-9999~host-10000~model'
        - name: model_version
          in: path
          required: true
          description: model version
          schema:
            type : string
            example: '202105060929263278441'
      responses:
        '200':
          description: return model data
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 0
                  retmsg:
                    type: string
                    example: success
                  data:
                    type: object
                    description: base64 encoded model data
        '404':
          description: model not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 404
                  retmsg:
                    type: string
                    example: model not found

  '/v1/component/validate':
    post:
      summary: validate component parameters
      tags:
        - component
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dsl_version:
                  type: integer
                  example: 2
                component_name:
                  type: string
                  example: dataio_0
                component_module_name:
                  type: string
                  example: DataIO
                role:
                  type: object
                  example:
                    guest:
                      - 10000
                    host:
                      - 9999
                    arbiter:
                      - 9999
                component_parameters:
                  type: object
                  description: required if `dsl_version` == 2
                  example:
                    common:
                      dataio_0:
                        output_format: dense
                      role:
                        guest:
                          '0':
                            dataio_0:
                              with_label: true
                        host:
                          '0':
                            dataio_0:
                              with_label: false
                              output_format: dense
                role_parameters:
                  type: object
                  description: required if `dsl_version` == 1
                  example:
                    guest:
                      dataio_0:
                        with_label:
                          - true
                        label_name:
                          - y
                        label_type:
                          - int
                        output_format:
                          - dense
                        missing_fill:
                          - true
                        outlier_replace:
                          - true
                    host:
                      dataio_0:
                        with_label:
                          - false
                        output_format:
                          - dense
                        outlier_replace:
                          - true
                algorithm_parameters:
                  type: object
                  description: required if `dsl_version` == 1
                  example:
                    hetero_feature_binning_0:
                      method: quantile
                      compress_thres: 10000
                      head_size: 10000
                      error: 0.001
                      bin_num: 10
                      adjustment_factor: 0.5
                      local_only: false
                      transform_param:
                        transform_cols: -1
                        transform_type: bin_num
      responses:
        '200':
          description: validation passed
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 0
                  retmsg:
                    type: string
                    example: success
        '400':
          description: validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  retcode:
                    type: integer
                    example: 400
                  retmsg:
                    type: string
                    description: error message
                    example: "Component dataio_0, module DataIO, does not pass component check, error msg is dataio param's dendse not supported, should be one of ['dense', 'sparse']"

tags:
  - name: information
  - name: model
  - name: component
